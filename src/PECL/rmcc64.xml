<?xml version="1.0" ?>
<extension name="phprmcc" version="1.0.0">
 <summary>Roma-client PHP extension</summary>
 <description>
  Roma-client PHP extension
 </description>
 <maintainers>
  <maintainer>
   <user>hirkubota</user>
   <name>hiroaki.kubota</name>
   <email>hiroaki.kubota@mail.rakuten.co.jp</email>
   <role>lead</role>
  </maintainer>
 </maintainers>
 <release>
  <version>0.9.1</version>
  <date>2011-04-08</date>
  <state>beta</state>
  <notes>
    Second version.
  </notes>
 </release>
 <changelog>
 </changelog>
 <license>PHP</license>

 <deps language="cpp" platform="all">
  <with defaults="/usr:/usr/local">
  <header name="string" />
  <header name="map" />
  <header name="fstream" />
  <header name="stdlib.h" />
  <header name="string.h" />
  <header name="rakuten/rmcc/rmcc.h" path="include" />
  <header name="rakuten/exception.h" path="include" />
  <lib name="r64_rmcc" platform="all" />
  </with>
 </deps>

 <globals>
  <global name="client_map" type="void*" />
 </globals>

 <function role="internal" name="MINIT">
  <code>
    <![CDATA[
       typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
       static client_map_t client_map;
       PHPRMCC_G(client_map) = (void*)&client_map;
    ]]>
  </code>
 </function>

 <function name="rmc_log">
  <proto>int rmc_log(int lv,int type)</proto>
  <code>
  <![CDATA[
     rakuten::set_loglv(lv);
     if ( type == 0 ) {
       rakuten::set_logfp(stdout);
     } else if ( type == 1 ) {
       rakuten::set_logfp(stderr);
     }
     RETURN_LONG(0);
  ]]>
  </code>
 </function>

 <function name="rmc_init">
  <proto>string rmc_init(array nl,int routing)</proto>
  <code>
  <![CDATA[
//std::ofstream logfs("/tmp/test.txt");
//logfs << "***********" << ::std::endl;
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     std::string client_id;     
     for ( int i = 0 ; i < zend_hash_num_elements(nl_hash) ; i++ ) {
	 zval **pData;
	 zend_hash_index_find(nl_hash,i,(void **)&pData);
	 convert_to_string_ex(pData);
	 char * str = Z_STRVAL_PP(pData);
         client_id = client_id + str;
     }
     client_map_t::iterator it = client_map->find(client_id);
     if ( it == client_map->end() ) {
         rakuten::rmcc::RomaClient * client = new rakuten::rmcc::RomaClient();
         client_map->insert(client_map_t::value_type(client_id,client));
         it = client_map->find(client_id);
     }
     it->second->get_nodelist().clear();
     for ( int i = 0 ; i < zend_hash_num_elements(nl_hash) ; i++ ) {
       zval **pData;
       zend_hash_index_find(nl_hash,i,(void **)&pData);
       convert_to_string_ex(pData);
       char * str = Z_STRVAL_PP(pData);
       if ( strchr(str,'_') ) {
         it->second->get_nodelist().push_back(str);
       }
     }
     try {
       it->second->init(routing);
     }catch(const rakuten::Exception & ex ) {
       // @@@ log...
       RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
     }
     RETURN_STRING((char*)client_id.c_str(),1);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_init() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     echo rmc_init($nl,1);
     ob_end_flush();
   </code>
   <result>## rmc_init() ##localhost_11211localhost_11212</result>
  </test>
 </function>

 <function name="rmc_num_connection">
  <proto>int rmc_num_connection(string client_id)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       RETURN_LONG(it->second->num_valid_connection());
     }
     RETURN_LONG(0);
  ]]>
  </code>
  <test>
   <code>
  <![CDATA[
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_num_connection() ##";
     rmc_log(100,0);
     // Connect 2 & routing
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_num_connection($cid);
     // Connect 1 & routing
     $nl = array();
     $nl[] = "localhost_11211";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_num_connection($cid);
     // Connect 1 & no-routing
     $nl = array();
     $nl[] = "-d";
     $nl[] = "localhost_11211";
     $cid = rmc_init($nl,0);
     echo $cid;
     echo rmc_num_connection($cid);
     ob_end_flush();
  ]]>
   </code>
   <result>## rmc_num_connection() ##localhost_11211localhost_112124localhost_112114-dlocalhost_112111</result>
  </test>
 </function>

 <function name="rmc_term">
  <proto>int rmc_term(string client_id)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       it->second->term();
       delete it->second;
       client_map->erase(it);
       RETURN_LONG(rakuten::rmcc::RMC_RET_OK);
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_term() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_term($cid);
     ob_end_flush();
   </code>
   <result>## rmc_term() ##localhost_11211localhost_112120</result>
  </test>
 </function>

 <function name="rmc_set">
  <proto>int rmc_set(string client_id, string key, string value, int exptime,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_store(key,rakuten::rmcc::RomaValue(value,value_len),exptime,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_set() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_set","FOOBAR",100,1000);
     ob_end_flush();
   </code>
   <result>## rmc_set() ##localhost_11211localhost_112120</result>
  </test>
 </function>

 <function name="rmc_add">
  <proto>int rmc_add(string client_id, string key, string value, int exptime,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_add(key,rakuten::rmcc::RomaValue(value,value_len),exptime,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_add() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_add($cid,"rmc_add","FOOBAR",100,1000);
     ob_end_flush();
   </code>
   <result>## rmc_add() ##localhost_11211localhost_112120</result>
  </test>
 </function>

 <function name="rmc_replace">
  <proto>int rmc_replace(string client_id, string key, string value, int exptime,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_replace(key,rakuten::rmcc::RomaValue(value,value_len),exptime,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_replace() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_replace","FOOBAR",100,1000);
     echo rmc_replace($cid,"rmc_replace","FOOBAR",100,1000);
     ob_end_flush();
   </code>
   <result>## rmc_replace() ##localhost_11211localhost_1121200</result>
  </test>
 </function>

 <function name="rmc_append">
  <proto>int rmc_append(string client_id, string key, string value, int exptime,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_append(key,rakuten::rmcc::RomaValue(value,value_len),exptime,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_append() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_append","FOOBAR",100,1000);
     echo rmc_append($cid,"rmc_append","FOOBAR",100,1000);
     ob_end_flush();
   </code>
   <result>## rmc_append() ##localhost_11211localhost_1121200</result>
  </test>
 </function>

 <function name="rmc_prepend">
  <proto>int rmc_prepend(string client_id, string key, string value, int exptime,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_prepend(key,rakuten::rmcc::RomaValue(value,value_len),exptime,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_prepend() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_prepend","FOOBAR",100,1000);
     echo rmc_prepend($cid,"rmc_prepend","FOOBAR",100,1000);
     ob_end_flush();
   </code>
   <result>## rmc_prepend() ##localhost_11211localhost_1121200</result>
  </test>
 </function>

 <function name="rmc_cas">
  <proto>int rmc_cas(string client_id, string key, string value, int exptime,int cas, int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_cas(key,rakuten::rmcc::RomaValue(value,value_len),exptime,cas,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_cas() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_cas","FOOBAR",100,1000);
     $ret = rmc_cas_unique($cid,"rmc_cas",1000);
     echo rmc_cas($cid,"rmc_cas","FOOBAR",100,$ret[2],1000);
     ob_end_flush();
   </code>
   <result>## rmc_cas() ##localhost_11211localhost_1121200</result>
  </test>
 </function>

 <function name="rmc_delete">
  <proto>int rmc_delete(string client_id, string key, int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_delete(key,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_delete() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_delete","FOOBAR",100,1000);
     echo rmc_delete($cid,"rmc_delete",1000);
     ob_end_flush();
   </code>
   <result>## rmc_delete() ##localhost_11211localhost_1121200</result>
  </test>
 </function>

 <function name="rmc_incr">
  <proto>int rmc_incr(string client_id, string key, int param, int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_incr(key, param, timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_INCDEC_ERROR);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_incr() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_incr","0",100,1000);
     echo rmc_incr($cid,"rmc_incr",1,1000);
     ob_end_flush();
   </code>
   <result>## rmc_incr() ##localhost_11211localhost_1121201</result>
  </test>
 </function>

 <function name="rmc_decr">
  <proto>int rmc_incr(string client_id, string key, int param, int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_decr(key, param, timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_INCDEC_ERROR);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_decr() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_decr","1",100,1000);
     echo rmc_decr($cid,"rmc_decr",1,1000);
     ob_end_flush();
   </code>
   <result>## rmc_decr() ##localhost_11211localhost_1121200</result>
  </test>
 </function>

 <function name="rmc_get">
  <proto>array rmc_get(string client_id, string key,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         rakuten::rmcc::RomaValue v = it->second->cmd_get(key,timeout);
         if ( v.length < 0 ) {
           add_index_stringl(return_value,0,(char*)"",0,1);
         }else {
           add_index_stringl(return_value,0,(char*)v.data,v.length,1);
         }
         add_index_long(return_value,1,v.length);
         add_index_long(return_value,2,v.cas);
       }catch(const rakuten::Exception & ex ) {
            // @@@ log...
         RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
       }
     } else {
       RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
     }
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_get() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_get","FOOBAR",100,1000);
     $ret = rmc_get($cid,"rmc_get",1000);
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
  <![CDATA[
## rmc_get() ##localhost_11211localhost_112120array(3) {
  [0]=>
  string(6) "FOOBAR"
  [1]=>
  int(6)
  [2]=>
  int(-1)
}
]]>
  </result>
  </test>
 </function>

 <function name="rmc_alist_sized_insert">
  <proto>int rmc_alist_sized_insert(string client_id, string key,int size,string value,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_alist_sized_insert(key,size,rakuten::rmcc::RomaValue(value,value_len),timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_sized_insert() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"rmc_alist_sized_insert",2,"FOOBAR",1000);
     echo rmc_alist_sized_insert($cid,"rmc_alist_sized_insert",2,"BARFOO",1000);
     ob_end_flush();
   </code>
   <result>## rmc_alist_sized_insert() ##localhost_11211localhost_1121200</result>
  </test>
 </function>

 <function name="rmc_alist_join">
  <proto>array rmc_alist_join(string client_id, string key,string sep,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         rakuten::rmcc::RomaValue v = it->second->cmd_alist_join(key,sep,timeout);
         if ( v.length < 0 ) {
           add_index_stringl(return_value,0,(char*)"",0,1);
         }else {
           add_index_stringl(return_value,0,(char*)v.data,v.length,1);
         }
         add_index_long(return_value,1,v.length);
         add_index_long(return_value,2,v.cas);
       }catch(const rakuten::Exception & ex ) {
	  // @@@ log...
         RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
       }
     }else {
       RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
     }

  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_join() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"rmc_alist_join",2,"FOOBAR",1000);
     echo rmc_alist_sized_insert($cid,"rmc_alist_join",2,"BARFOO",1000);
     echo rmc_alist_sized_insert($cid,"rmc_alist_join",2,"FOOFOO",1000);
     $ret = rmc_alist_join($cid,"rmc_alist_join",",",1000);
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
<![CDATA[
## rmc_alist_join() ##localhost_11211localhost_11212000array(3) {
  [0]=>
  string(13) "FOOFOO,BARFOO"
  [1]=>
  int(13)
  [2]=>
  int(-1)
}
]]>
  </result>
  </test>
 </function>

 <function name="rmc_alist_delete">
  <proto>int rmc_alist_delete(string client_id, string key,string value,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_alist_delete(key,rakuten::rmcc::RomaValue(value,value_len),timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_delete() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"rmc_alist_delete",2,"FOOBAR",1000);
     echo rmc_alist_sized_insert($cid,"rmc_alist_delete",2,"BARFOO",1000);
     echo rmc_alist_delete($cid,"rmc_alist_delete","BARFOO",1000);
     $ret = rmc_alist_join($cid,"rmc_alist_delete",",",1000);
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
<![CDATA[
## rmc_alist_delete() ##localhost_11211localhost_11212000array(3) {
  [0]=>
  string(6) "FOOBAR"
  [1]=>
  int(6)
  [2]=>
  int(-1)
}
]]>
   </result>
  </test>
 </function>
 <function name="rmc_alist_delete_at">
  <proto>int rmc_alist_delete_at(string client_id, string key,int pos,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_alist_delete_at(key,pos,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_delete_at() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"rmc_alist_delete_at",2,"FOOBAR",1000);
     echo rmc_alist_sized_insert($cid,"rmc_alist_delete_at",2,"BARFOO",1000);
     echo rmc_alist_delete_at($cid,"rmc_alist_delete_at",0,1000);
     $ret = rmc_alist_join($cid,"rmc_alist_delete_at",",",1000);
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
<![CDATA[
## rmc_alist_delete_at() ##localhost_11211localhost_11212000array(3) {
  [0]=>
  string(6) "FOOBAR"
  [1]=>
  int(6)
  [2]=>
  int(-1)
}
]]>
   </result>
  </test>
 </function>

 <function name="rmc_alist_clear">
  <proto>int rmc_alist_clear(string client_id, string key, int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_alist_clear(key,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_clear() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"rmc_alist_clear",1,"FOOBAR",1000);
     echo rmc_alist_clear($cid,"rmc_alist_clear",1000);
     echo rmc_alist_length($cid,"rmc_alist_clear",1000);
     ob_end_flush();
   </code>
   <result>## rmc_alist_clear() ##localhost_11211localhost_11212000</result>
  </test>
 </function>

 <function name="rmc_alist_length">
  <proto>int rmc_alist_length(string client_id, string key, int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_alist_length(key,timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_ALIST_LENGTH_ERROR);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_length() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"rmc_alist_sized_insert",2,"FOOBAR",1000);
     echo rmc_alist_sized_insert($cid,"rmc_alist_sized_insert",2,"BARFOO",1000);
     echo rmc_alist_length($cid,"rmc_alist_sized_insert",1000);
     ob_end_flush();
   </code>
   <result>## rmc_alist_length() ##localhost_11211localhost_11212002</result>
  </test>
 </function>

 <function name="rmc_alist_update_at">
  <proto>int rmc_alist_update_at(string client_id, string key, int index, string value, int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_alist_update_at(key,index,rakuten::rmcc::RomaValue(value,value_len),timeout);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_update_at() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"rmc_alist_update_at",1,"FOOBAR",1000);
     echo rmc_alist_update_at($cid,"rmc_alist_update_at",0,"BARFOO",1000);
     $ret = rmc_alist_join($cid,"rmc_alist_update_at",",",1000);
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
<![CDATA[
## rmc_alist_update_at() ##localhost_11211localhost_1121200array(3) {
  [0]=>
  string(6) "BARFOO"
  [1]=>
  int(6)
  [2]=>
  int(-1)
}
]]>
   </result>
  </test>
 </function>

 <function name="rmc_cas_unique">
  <proto>array rmc_cas_unique(string client_id, string key,int timeout)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         rakuten::rmcc::RomaValue v = it->second->cmd_gets(key,timeout);
         if ( v.length < 0 ) {
           add_index_stringl(return_value,0,(char*)"",0,1);
         }else {
           add_index_stringl(return_value,0,(char*)v.data,v.length,1);
         }
         add_index_long(return_value,1,v.length);
         add_index_long(return_value,2,v.cas);
       }catch(const rakuten::Exception & ex ) {
            // @@@ log...
         RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
       }
     } else {
       RETURN_LONG(rakuten::rmcc::RMC_RET_EXCEPTION);
     }
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_cas_unique() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"rmc_cas_unique","FOOBAR",100,1000);
     $ret = rmc_cas_unique($cid,"rmc_cas_unique",1000);
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
  <![CDATA[
## rmc_cas_unique() ##localhost_11211localhost_112120array(3) {
  [0]=>
  string(6) "FOOBAR"
  [1]=>
  int(6)
  [2]=>
  int(0)
}
]]>
  </result>
  </test>
 </function>

</extension>
